#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;                
    struct Node* next;       
} Node;

// o struct acima correesponde a estrutura do nó para a fila

typedef struct Queue {
    Node* front;             
    Node* rear;              
} Queue;

// o struct acima correesponde a estrutura da fila

Queue* createQueue() {
    Queue* q = (Queue*)malloc(sizeof(Queue));  
    if (q == NULL) {                           
        printf("Falha na alocação de memória para a fila.\n");
        return NULL;
    }
    q->front = q->rear = NULL;  
    return q;                   
}

//a função acima é responsáve por criar e inicializar uma nova fila

void enqueue(Queue* q, int value) {
    Node* newNode = (Node*)malloc(sizeof(Node));  
    if (newNode == NULL) {                       
        printf("Falha na alocação de memória para o novo nó.\n");
        return;
    }
    newNode->data = value;   
    newNode->next = NULL;    
    if (q->rear == NULL) {   
        q->front = q->rear = newNode; 
    } else {                 
        q->rear->next = newNode;  
        q->rear = newNode;       
    }
}

// a função acima é responsáve por adicionar um novo elemento no final da fila

int dequeue(Queue* q) {
    if (q->front == NULL) { 
        printf("Fila está vazia.\n");
        return -1;           
    }
    Node* temp = q->front;   
    int data = temp->data;   
    q->front = q->front->next;  
    if (q->front == NULL) { 
        q->rear = NULL;      
    }
    free(temp);              
    return data;             

// a função acima é responsáve por remover o elemento da frente da fila

int isEmpty(Queue* q) {
    return q->front == NULL;
}

// a função acima é responsáve por verificar se a fila está vazia

void printQueue(Queue* q) {
    if (isEmpty(q)) {       
        printf("A fila está vazia.\n");
        return;
    }
    Node* temp = q->front;   
    printf("Elementos da fila: ");
    while (temp != NULL) {  
        printf("%d ", temp->data);  
        temp = temp->next;         
    }
    printf("\n");
}

// a função acima é responsáve por imprimir todos os elementos da fila

int main() {
    Queue* q = createQueue();  
    enqueue(q, 10);            
    enqueue(q, 20);          
    enqueue(q, 30);           
    printQueue(q);             

    printf("Desenfileirado: %d\n", dequeue(q));  
    printQueue(q);            
    printf("Desenfileirado: %d\n", dequeue(q));  
    printQueue(q);            
    printf("Desenfileirado: %d\n", dequeue(q)); 
    printQueue(q);             

    return 0;
}

Código modificado:


#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

typedef struct Queue {
    Node* front;
    Node* rear;
} Queue;

Queue* createQueue() {
    Queue* q = (Queue*)malloc(sizeof(Queue));
    if (q == NULL) {
        printf("Falha na alocação de memória para a fila.\n");
        return NULL;
    }
    q->front = q->rear = NULL;
    return q;
}

void enqueue(Queue* q, int value) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (newNode == NULL) {
        printf("Falha na alocação de memória para o novo nó.\n");
        return;
    }
    newNode->data = value;
    newNode->next = NULL;
    if (q->rear == NULL) { 
        q->front = q->rear = newNode;
    } else { 
        q->rear->next = newNode;
        q->rear = newNode;
    }
}

int dequeue(Queue* q) {
    if (q->front == NULL) { 
        printf("Fila está vazia.\n");
        return -1;
    }
    Node* temp = q->front;
    int data = temp->data;
    q->front = q->front->next;
    if (q->front == NULL) {
        q->rear = NULL;
    }
    free(temp);
    return data;
}

int isEmpty(Queue* q) {
    return q->front == NULL;
}

void printQueue(Queue* q) {
    if (isEmpty(q)) {
        printf("A fila está vazia.\n");
        return;
    }
    Node* temp = q->front;
    printf("Elementos da fila: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

int countQueue(Queue* q) {
    int count = 0;
    Node* temp = q->front;
    while (temp != NULL) {
        count++;
        temp = temp->next;
    }
    return count;
}

void clearQueue(Queue* q) {
    while (!isEmpty(q)) {
        dequeue(q);
    }
}

int main() {
    Queue* q = createQueue();
    enqueue(q, 10);
    enqueue(q, 20);
    enqueue(q, 30);
    printQueue(q);

    printf("Número de elementos na fila: %d\n", countQueue(q));

    printf("Desenfileirado: %d\n", dequeue(q));
    printQueue(q);
    printf("Número de elementos na fila: %d\n", countQueue(q));

    clearQueue(q);
    printQueue(q);
    printf("Número de elementos na fila após limpar: %d\n", countQueue(q));

    free(q);

    return 0;
}

